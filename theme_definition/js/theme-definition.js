/* theme-definition.js */

var writeToReadableOutput = function(html) {
	$('#readable-output').find('div').html(html);
}

var updateReadableOutput = function() {
	var res = $('#builder').queryBuilder('getSQL', false, true);
	if (res.sql !== ""){
		writeToReadableOutput('<pre>' + res.sql + '</pre>');
	} else {
    	writeToReadableOutput('&nbsp;');
	}
}

/* Create event handlers triggered when rules inputs change */
var updateRulesInputListener = function(){
	// when a value is entered in a text field
	$('.rule-value-container').find('input').keyup(function () {
		updateReadableOutput();
	});
	
	// when the condition ("AND"/"OR" ) changes
	$('input[name^="builder_group_"][name$="_cond"]').change(function(){
		updateReadableOutput();
	});
}

/* Enable and configure jQuery-QueryBuilder */	
$('#builder').queryBuilder({
	filters: [
		{
			id: 'descriptor',
			label: 'Descriptor',
			type: 'string',
			onAfterChangeOperator: function(){
				updateReadableOutput();
			}
		}
	],
	default_condition: 'OR',
	operators: [
		{
			type: 'exactSearch',
			accept_values: true,
			apply_to: ['string'],
			allow_empty_value: true
		},
		{
			type: 'regularExpression',
			accept_values: true,
			apply_to: ['string'],
			allow_empty_value: true
		},
		{
			type: 'inflectedForm',
			accept_values: true,
			apply_to: ['string'],
			allow_empty_value: true
		},
		{
			type: 'semantic',
			accept_values: true,
			apply_to: ['string'],
			allow_empty_value: true,
			input: function() {
				return '\
				  <select name="semantic_distance"> \
					<option value="-1">-</option> \
					<option value="3">3</option> \
					<option value="7">7</option> \
					<option value="12">12</option> \
				  </select>';
			}
		},
	],
	onAfterAddGroup: function(){
		updateRulesInputListener();
	},
	onAfterAddRule: function(){
		updateRulesInputListener();
	}, 
	sqlOperators: {
		exactSearch: '<span class="sql-operator">exact</span>(<span class="descriptor-value">?</span>)',
		regularExpression: '<span class="sql-operator">regexp</span>(<span class="descriptor-value">?</span>)',
		inflectedForm: '<span class="sql-operator">inflected</span>(<span class="descriptor-value">?</span>)',
		semantic: '<span class="sql-operator">semantic</span>(<span class="descriptor-value">?</span>)'
	},
	lang: {
		operator_semantic: 'Semantic',
		operator_inflectedForm: 'Inflected Form',
		operator_regularExpression: 'Regular Expression',
		operator_exactSearch: 'Exact Search'
	},					
	sortable: true
});

/* Init events handler on "Parse" button */
$('#parse-builder').click(function(){
	var res = $('#builder').queryBuilder('getRules');
	$(".ontheleft pre").html(JSON.stringify(res, null, 2));
	
	var theme = {};
	
	if (res.condition) {
		theme = { expression: parseRule(res) };
	}
	
	$(".ontheright pre").html(JSON.stringify(theme, null, 2));
	
	updateReadableOutput();
});

/* Init events handler on "Reset" button */
$('#reset-builder').click(function(){
	$('#builder').queryBuilder('reset');
	$('#result pre').html("&nbsp;");
	writeToReadableOutput("&nbsp;");
});

/* Parse JSON generated by jQuery-QueryBuilder into the format we want for the ELS API (recursion-style) */
var parseRule = function(rule) {
	var parsedRule = {};
	
	parsedRule[rule.condition] = new Array();
	
	var arrayLength = rule.rules.length;
	for (var i = 0; i < arrayLength; i++) {
		if (rule.rules[i].condition) {
			parsedRule[rule.condition].push(parseRule(rule.rules[i]));
		} else {
			var descriptor = {};
			descriptor[rule.rules[i].operator]={"value": rule.rules[i].value};
			parsedRule[rule.condition].push(descriptor);
		}
	}
	
	return parsedRule;
}

/* Initialize events handlers on rules inputs */
updateRulesInputListener();

/* Enable a tooltip on the link to jQuery-QueryBuilder page */
$('#link-querybuilder').tooltip({
	placement: 'left',
	title: 'Go to http://mistic100.github.io/jQuery-QueryBuilder/'
});

